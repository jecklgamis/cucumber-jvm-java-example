# Cucumber JVM Java Example image:https://travis-ci.org/jecklgamis/cucumber-jvm-java-example.svg?branch=master["Build Status", link="https://travis-ci.org/jecklgamis/cucumber-jvm-java-example"]

About
-----

This is an example Cucumber-JVM project.

* Uses Java 8 lambda step definitions
* Packages tests into executable jar file
* Guice dependency injection

Getting Started
---------------

If you're new to Cucumber testing, start with `https://cucumber.io/docs`. Otherwise, run the example
test in IDE or command line (see Running Cucumber Tests).

Essential Elements
------------------

* Feature files - contains the BDD feature definitions (Gherkin, e.g. `Example.feature`)
* Step definitions - Implementation of the step definitions (Java, e.g. `ExampleSteps.java`)
* CucumberTestMain - this is the program entry point when tests are packaged as executable jar file (e.g. target/cucumber-jvm-java-example.jar)
* Test runners - run specific feature set ( Java with Junit annotations, e.g. `ExampleTestRunner.java`). This is only used when developing tests.

Creating Tests
--------------

* Create or update feature file in `src/main/resources/features`
* Create or update test runner in `src/test/java/runner` with the appropriate tags
* Implement or update steps in `src/main/java/steps`

Creating Feature Files
~~~~~~~~~~~~~~~~~~~~~~

.Example
----
Feature: Example feature

  @ExampleFeature
  Scenario: Example scenario
    Given this pre condition
    And this pre condition
    When I do this
    And I do that
    Then I can verify that
    And I can also verify that
----

Creating Test Runner
~~~~~~~~~~~~~~~~~~~~
See the example below and change the appropriate values of the CucumberOptions annotation.

.ExampleTestRunner.java
----
@RunWith(Cucumber.class)
@CucumberOptions(
        features = {"classpath:features/Example.feature"},
        tags = {"~@Wip"},
        glue = {"classpath:steps"},
        plugin = {"pretty", "html:target/cucumber/html"})
public class ExampleFeatureRunner {
}
----
* This runs all scenarios in `Example.feature` not tagged with `@Wip`
* The step definitions are loaded from class path `steps`
* This generates reports in `target/cucumber/html` folder relative to some execution path

ANDing, NEGating, and ORing Cucumber Tags
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* `~` negates a tag
* Comma separated tags are ORed (example `tags = {"@FeatureSet1,@FeatureSet2"}` means run both feature sets)
* Separated tags are ANDed (example `tags = {"~@Wip","@FeatureSet1"}` means run `@FeatureSet1` but not those tagged with `@Wip`)

Implementing Steps/Glue
~~~~~~~~~~~~~~~~~~~~~~~

After you created the feature files, run the test runner, it will give you hints on the missing steps you need to implement

Example (`ExampleSteps.java`)
----
package steps;

import com.google.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import cucumber.api.Scenario;
import cucumber.api.java8.En;
import util.TestContext;
import util.UrlReaderService;

public class ExampleSteps implements En {
    private static final Logger log = LoggerFactory.getLogger(ExampleSteps.class);

    TestContext testContext;

    UrlReaderService urlReaderService;

    @Inject
    public ExampleSteps(UrlReaderService urlReaderService, TestContext testContext) {
        this.urlReaderService = urlReaderService;
        this.testContext = testContext;
        configureSteps();
    }

    private void configureSteps() {
        Before((Scenario scenario) -> {
            log.info("Before scenario : " + scenario.getName());
        });

        After((Scenario scenario) -> {
            log.info("After scenario : " + scenario.getName());
        });

        Given("^this pre condition$", () -> {
            testContext.put("some-key", "some-value");
        });

        When("^I do this$", () -> {
        });

        When("^I do that$", () -> {
        });

        Then("^I can verify that$", () -> {
            assert (testContext.get("some-key").get().equals("some-value"));
        });

        Then("^I can also verify that$", () -> {
        });

    }

}
----

Dependency Injection
~~~~~~~~~~~~~~~~~~~~
The `ExampleSteps` has two dependencies: `UrlReaderService` and `TestContext`.
These are automatically injected by Guice when it instantiates the steps for each scenario.
Furthermore, `UrlReaderService` depends on an HTTP client (standard JAX RS Client in this case).
That client to an instance of Jersey client in `ExampleTestModule`

.ExampleTestModule.java
----
class ExampleTestModule extends AbstractModule {
    @Override
    protected void configure() {
        bind(Client.class).toInstance(JerseyClientBuilder.createClient());
    }
}
----
The module (and possibly with other modules you define), is used to create the Guice injector in
`ExampleInjectorSource`.

.ExampleInjectorSource.java
----
public class ExampleInjectorSource implements InjectorSource {
    @Override
    public Injector getInjector() {
        return Guice.createInjector(Stage.PRODUCTION, CucumberModules.SCENARIO, new ExampleTestModule());
    }
}
----

The Cucumber runtime uses `cucumber.properties` in the resource path to locate this `ExampleInjectorSource`

.cucumber.properties
----
guice.injector-source=util.ExampleInjectorSource
----

The `TestContext` is just an abstraction of states  you need to pass around during steps. This is
a simple thread local map.

Running Cucumber Tests in CLI
-----------------------------

Using executable jar file:
----
mvn clean package
java -jar target/cucumber-jvm-java-example.jar --plugin pretty --plugin html:cucumber/html --json json:cucumber/json/cucumber.json  --glue steps classpath:features --tags ~@Wip
----

or using `cucumber.options` environment variable:

----
mvn clean package
java -Dcucumber.options="--plugin pretty --plugin html:cucumber/html  --plugin json:cucumber/json/cucumber.json  --tags ~@Wip --glue steps classpath:features" -jar target/cucumber-jvm-java-example.jar
----

Using maven exec:plugin:
----
mvn exec:java -Dcucumber.options="--plugin pretty --plugin html:cucumber/html --plugin json:cucumber/json/cucumber.json --tags ~@Wip --tags @ExampleFeature"
----

The above command line examples generate reports in `cucumber/html` and in  `cucumber/json` directories

The `run-all-tests-using-jar.sh` and `run-all-tests-using-plugin.sh` wraps
these commands.

Running Cucumber Tests in IDE (Intellij IDEA)
---------------------------------------------
In the `Run/Debug Configuration` , add the steps directories (in this example, `steps`) in the `Glue` text field.

Links
-----
* https://cucumber.io/docs
* http://github.com/cucumber/cucumber-jvm
* https://github.com/google/guice


